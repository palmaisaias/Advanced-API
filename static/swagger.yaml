swagger: '2.0'
info:
  title: "Shopping API"
  description: "API for Customer information, Orders and Products" 
  version: "1.5"
host: "127.0.0.1:5000"
schemes: 
  - "http"
consumes:
  - "application/json"
produces:
  - "application/json"
securityDefinitions:
  bearerAuth:
    type: apiKey
    name: Authorization
    in: header
paths:
# ORDER ENDPOINTS -----------------------------------------------
  /orders/{customer_id}/place:
    post:
      tags:
        - Orders
      summary: "Place an Order"
      description: "Places an order for a customer based on their cart"
      parameters:
        - name: "customer_id"
          in: "path"
          required: true
          type: "integer"
          description: "ID of the customer placing the order"
      security:
        - bearerAuth: []
      responses:
        201:
          description: "Order placed successfully"
          schema:
            $ref: "#/definitions/OrderResponse"
        401:
          description: "Unauthorized - Token does not match customer ID"
          schema:
            $ref: "#/definitions/ErrorResponse"
        404:
          description: "Order could not be placed"
          schema:
            $ref: "#/definitions/ErrorResponse"

  /orders/{id}:
    get:
      tags:
        - Orders
      summary: "Get an Order"
      description: "Retrieves the details of a specific order"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "integer"
          description: "ID of the order to retrieve"
      security:
        - bearerAuth: []
      responses:
        200:
          description: "Order retrieved successfully"
          schema:
            $ref: "#/definitions/GetOrderResponse"
        401:
          description: "Unauthorized - Token does not match"
          schema:
            $ref: "#/definitions/ErrorResponse"
        404:
          description: "Order not found"
          schema:
            $ref: "#/definitions/ErrorResponse"


# CUSTOMER ENDPOINTS --------------------------------------------
  /customers/login:
    post:
      tags: 
        - Customers
      summary: "Login Endpoint (generates token)"
      description: "Endpoint for user auth and token generation"
      parameters:
        - in: "body"
          name: "body"
          description: "Credentials for Login"
          required: true
          schema:
            $ref: "#/definitions/LoginPayload"
      responses:
        200:
          description: "Login Successful"
          schema:
            $ref: "#/definitions/LoginResponse"
          examples:
            application/json:
              auth_token: "hjfltuFLHJGjhfLUfjhg..."
              message: "Succesfully logged in"
              status: "success"

  /customers:
    get:
      tags:
        - Customers
      summary: "Returns all Customers" 
      descriptions: "Returns all customers' information (requires token)"
      security:
        - bearerAuth: []
      responses:
        200:
          description: "Retrieved Customers Successfully" 
          schema:
            $ref: "#/definitions/AllCustomers"

# PRODUCT ENDPOINTS-------------------------------------------------
  /products:
    get:
      tags:
        - Products
      summary: "Returns all Products" 
      descriptions: "Returns all products' information (requires token)"
      responses:
        200:
          description: "Retrieved Products Successfully" 
          schema:
            $ref: "#/definitions/AllProducts"
  
    post:
      tags:
        - Products
      summary: "Save a new Product"
      description: "Creates a new product in the system"
      parameters:
        - in: "body"
          name: "body"
          description: "Product to save"
          required: true
          schema:
            $ref: "#/definitions/ProductPayload"
      responses:
        201:
          description: "Product Created Successfully"
          schema:
            $ref: "#/definitions/ProductResponse"
        400:
          description: "Invalid input"
  
  /products/{product_id}:
    put:
      tags:
        - Products
      summary: "Update a Product"
      description: "Updates an existing product in the system"
      parameters:
        - name: "product_id"
          in: "path"
          required: true
          type: "integer"
          description: "ID of the product to update"
        - in: "body"
          name: "body"
          description: "Product details to update"
          required: true
          schema:
            $ref: "#/definitions/ProductUpdatePayload"
      responses:
        200:
          description: "Product Updated Successfully"
          schema:
            $ref: "#/definitions/ProductResponse"
        400:
          description: "Invalid input"
        404:
          description: "Product not found"

definitions:
  LoginPayload:
    type: "object"
    properties:
      username:
        type: "string"
        description: "Customer username"
      password:
        type: "string"
        description: "Customer password"
    required:
      - "username"
      - "password"
  
  LoginResponse: 
    type: "object" 
    properties:
      auth token:
        type: "string" 
        description: "Authorization Token"
      message: 
        type: "string" 
        description: "Succesfully Logged in"
      status:
        type: "string"
        description: "Success"

  AllCustomers:
    type: "object" 
    properties:
      name:
        type: "string" 
        description: "Customer Name"
      email:
        type: "string" 
        description: "Customer Email"
      phone: 
        type: "string" 
        description: "Customer Phone"
      username: 
        type: "string" 
        description: "Customer Name"
      role_id:
        type: "integer"
        description: "Customer"
  
  AllProducts:
    type: "object" 
    properties:
      name:
        type: "string" 
        description: "Products Name"
      price:
        type: "float" 
        description: "Product Price"

  ProductPayload:
    type: "object"
    properties:
      product_name:
        type: "string"
        description: "Name of the product"
      price:
        type: "number"
        format: "float"
        description: "Price of the product"
    required:
      - "name"
      - "price"

  ProductResponse:
    type: "object"
    properties:
      id:
        type: "integer"
        description: "ID of the product"
      price:
        type: "number"
        format: "float"
        description: "Price of the product"
      name:
        type: "string"
        description: "Name of the product"

  ProductUpdatePayload:
    type: "object"
    properties:
      product_name:
        type: "string"
        description: "Name of the product"
      price:
        type: "number"
        format: "float"
        description: "Price of the product"
    required:
      - "name"
      - "price"
    
  OrderResponse:
    type: "object"
    properties:
      id:
        type: "integer"
        description: "ID of the new order"
      message:
        type: "string"
        description: "Order placed successfully"

  ErrorResponse:
    type: "object"
    properties:
      message:
        type: "string"
        description: "Error message"
  
  GetOrderResponse:
    type: "object"
    properties:
      id:
        type: "integer"
        description: "ID of the order"
      order_date:
        type: "string"
        format: "date"
        description: "Date of the order"
      customer_id:
        type: "integer"
        description: "ID of the customer who placed the order"
      items:
        type: "array"
        items:
          $ref: "#/definitions/OrderItem"
      message:
        type: "string"
        description: "Success message"

  OrderItem:
    type: "object"
    properties:
      product_id:
        type: "integer"
        description: "ID of the product"
      quantity:
        type: "integer"
        description: "Quantity of the product ordered"
      price:
        type: "number"
        format: "float"
        description: "Price of the product"